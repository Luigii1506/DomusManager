// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  properties    Property[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Property {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  type        PropertyType
  status      PropertyStatus
  price       Decimal
  address     String
  city        String
  state       String
  zipCode     String
  size        Int
  bedrooms    Int
  bathrooms   Int
  yearBuilt   Int
  features    Features?
  images      Image[]
  documents   Document[]
  maintenanceRecords MaintenanceRecord[]
  user        User     @relation(fields: [ownerId], references: [id])
  ownerId     String

  Tenant Tenant[]

  TenantProperty TenantProperty[]
}

model Features {
  id        String    @id @default(cuid())
  property  Property  @relation(fields: [propertyId], references: [id])
  propertyId String   @unique
  amenities Amenity[]
  parking   Parking[]
  security  Security[]
}

model Amenity {
  id        String    @id @default(cuid())
  name      String
  features  Features  @relation(fields: [featuresId], references: [id])
  featuresId String
}

model Parking {
  id        String    @id @default(cuid())
  type      String
  features  Features  @relation(fields: [featuresId], references: [id])
  featuresId String
}

model Security {
  id        String    @id @default(cuid())
  type      String
  features  Features  @relation(fields: [featuresId], references: [id])
  featuresId String
}

model Image {
  id        String    @id @default(cuid())
  url       String
  property  Property  @relation(fields: [propertyId], references: [id])
  propertyId String
}

model Document {
  id          String    @id @default(cuid())
  name        String
  url         String
  type        String
  property    Property  @relation(fields: [propertyId], references: [id])
  propertyId  String
  uploadedAt  DateTime  @default(now())
}

model MaintenanceRecord {
  id          String    @id @default(cuid())
  title       String
  description String
  status      MaintenanceStatus
  priority    MaintenancePriority
  cost        Decimal?
  property    Property  @relation(fields: [propertyId], references: [id])
  propertyId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum PropertyType {
  HOUSE
  APARTMENT
  CONDO
  TOWNHOUSE
  LAND
  COMMERCIAL
}

enum PropertyStatus {
  AVAILABLE
  RENTED
  SOLD
  MAINTENANCE
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Tenant {
  id                   String    @id @default(cuid())
  firstName            String
  lastName             String
  email                String    @unique
  phone                String
  currentAddress       String
  city                 String
  state                String
  zipCode              String
  employmentStatus     String
  employerName         String?
  monthlyIncome        Decimal
  emergencyContactName String
  emergencyContactPhone String
  notes                String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  TenantProperty TenantProperty[]

  Property Property[]
}

model TenantProperty {
  id          String   @id @default(cuid())
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String
  property    Property @relation(fields: [propertyId], references: [id])
  propertyId  String
  startDate   DateTime
  endDate     DateTime?
  rentAmount  Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([tenantId, propertyId])
}